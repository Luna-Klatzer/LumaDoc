services:
  frontend:
    build:
      context: .
      dockerfile: ./solardoc/frontend/Dockerfile
      args:
        PUPPETEER_SKIP_DOWNLOAD: true
    volumes:
      - ./solardoc/frontend:/home/node/app
    ports:
      - "80:80"
    environment:
      PUPPETEER_SKIP_DOWNLOAD: true
      PROD_BACKEND_PORT: ${PROD_BACKEND_PORT}
      PROD_BACKEND_HOST: ${PROD_BACKEND_HOST}
      NODE_ENV: production
    depends_on:
      - rest-api
    links:
      - rest-api
    restart: always
  rest-api:
    build:
      context: .
      dockerfile: ./solardoc/rest-api/Dockerfile
      args:
        PUPPETEER_SKIP_DOWNLOAD: true
        PERSISTENT_STORAGE_PATH: ${PERSISTENT_STORAGE_PATH}
    ports:
      - "3000:3000"
    environment:
      REDIS_ROOT_PASSWORD: ${REDIS_ROOT_PASSWORD}
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_HOST: redis-db
      REDIS_PORT: 6379
      PERSISTENT_STORAGE_PATH: ${PERSISTENT_STORAGE_PATH}
      PUPPETEER_SKIP_DOWNLOAD: true
      NODE_ENV: production
    volumes:
      - rest-api-persistent-storage:${PERSISTENT_STORAGE_PATH}
    depends_on:
      redis-db:
        condition: service_healthy
    links:
      - redis-db
    restart: always
  redis-db:
    build: ./solardoc/redis-db
    ports:
      - "6379:6379"
      - "8001:8001"
    privileged: true
    volumes:
      - ./solardoc/redis-db/data:/redis/data
    environment:
      REDIS_ROOT_PASSWORD: ${REDIS_ROOT_PASSWORD}
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30
    restart: always
  postgresql-db:
    build: ./solardoc/postgresql-db
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
  postgres-adminer:
    build: ./solardoc/postgres-adminer
    ports:
      - "8080:8080"
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: postgresql-db
      ADMINER_DEFAULT_USERNAME: ${POSTGRES_USER}
      ADMINER_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
      ADMINER_DEFAULT_DATABASE: ${POSTGRES_DB}

volumes:
  rest-api-persistent-storage:
